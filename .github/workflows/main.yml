name: Multi-Service Build and Deploy

on:
  push:
    branches: [main]

env:
  API_SERVICES: "Catalog Basket Ordering"
  GRPC_SERVICES: "Discount"
  GATEWAYS: "YarpApiGateway"
  CHART_DIR: ./helm
  RELEASE_NAME: eshop
  NAMESPACE: eshop
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  VERSION_TAG: ${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        
      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Build and start Docker Compose
        run: |
          docker compose -f ./src/docker-compose.yml -f ./src/docker-compose.override.yml up -d

      # - name: Wait for containers to be ready
      #   run: |
      #     sleep 10

      # - name: Run tests
      #   run: |
      #     dotnet test ./tests/ArchitectureTests/ArchitectureTests.csproj

      - name: Clean up Docker containers
        run: |
          docker compose -f ./src/docker-compose.yml -f ./src/docker-compose.override.yml down

  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker_Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Build and Push images for GRPC Services
        env:
          GRPC_SERVICES: ${{ env.GRPC_SERVICES }}
          DOCKER_HUB_USERNAME: ${{ env.DOCKER_HUB_USERNAME }}
          VERSION_TAG: ${{ env.VERSION_TAG }}
        run: |
          for SERVICE in $GRPC_SERVICES; do
            SERVICE_LOWER=$(echo $SERVICE | tr '[:upper:]' '[:lower:]')
            IMAGE="$DOCKER_HUB_USERNAME/${SERVICE_LOWER}-grpc"
            docker build -t $IMAGE:$VERSION_TAG -f ./src/Services/$SERVICE/${SERVICE}.Grpc/Dockerfile ./src
            docker push $IMAGE:$VERSION_TAG
          done

      - name: Build and Push images for API Services
        env:
          API_SERVICES: ${{ env.API_SERVICES }}
          DOCKER_HUB_USERNAME: ${{ env.DOCKER_HUB_USERNAME }}
          VERSION_TAG: ${{ env.VERSION_TAG }}
        run: |
          for SERVICE in $API_SERVICES; do
            SERVICE_LOWER=$(echo $SERVICE | tr '[:upper:]' '[:lower:]')
            IMAGE="$DOCKER_HUB_USERNAME/${SERVICE_LOWER}-api"
            docker build -t $IMAGE:$VERSION_TAG -f ./src/Services/$SERVICE/${SERVICE}.API/Dockerfile ./src
            docker push $IMAGE:$VERSION_TAG
          done

      - name: Build and Push images for API Gateways
        env:
          GATEWAYS: ${{ env.GATEWAYS }}
          DOCKER_HUB_USERNAME: ${{ env.DOCKER_HUB_USERNAME }}
          VERSION_TAG: ${{ env.VERSION_TAG }}
        run: |
          for GATEWAY in $GATEWAYS; do
            GATEWAY_LOWER=$(echo $GATEWAY | tr '[:upper:]' '[:lower:]')
            IMAGE="$DOCKER_HUB_USERNAME/$GATEWAY_LOWER"
            docker build -t $IMAGE:$VERSION_TAG -f ./src/ApiGateways/$GATEWAY/Dockerfile ./src
            docker push $IMAGE:$VERSION_TAG
          done

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm and kubectl
        uses: azure/setup-helm@v3

      - name: Set KUBECONFIG
        run: |
          mkdir -p $HOME/.kube
          printf "%s" "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Helm upgrade
        run: helm upgrade --install $RELEASE_NAME $CHART_DIR -n $NAMESPACE --create-namespace --atomic --wait --set image.tag=${{ env.VERSION_TAG }}
